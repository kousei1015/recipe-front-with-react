/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as RecipeIdIndexImport } from './routes/$recipeId/index'

// Create Virtual Routes

const SignupRouteLazyImport = createFileRoute('/signup')()
const SigninRouteLazyImport = createFileRoute('/signin')()
const ProfileRouteLazyImport = createFileRoute('/profile')()
const FavoritesRouteLazyImport = createFileRoute('/favorites')()
const CreateRouteLazyImport = createFileRoute('/create')()
const MyfollowingsIndexLazyImport = createFileRoute('/myfollowings/')()
const MyfollowersIndexLazyImport = createFileRoute('/myfollowers/')()
const UserIdRecipesLazyImport = createFileRoute('/$userId/recipes')()
const RecipeIdEditLazyImport = createFileRoute('/$recipeId/edit')()
const FollowIdFollowingsLazyImport = createFileRoute('/$followId/followings')()
const FollowIdFollowersLazyImport = createFileRoute('/$followId/followers')()

// Create/Update Routes

const SignupRouteLazyRoute = SignupRouteLazyImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup/route.lazy').then((d) => d.Route))

const SigninRouteLazyRoute = SigninRouteLazyImport.update({
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signin/route.lazy').then((d) => d.Route))

const ProfileRouteLazyRoute = ProfileRouteLazyImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile/route.lazy').then((d) => d.Route))

const FavoritesRouteLazyRoute = FavoritesRouteLazyImport.update({
  path: '/favorites',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/favorites/route.lazy').then((d) => d.Route),
)

const CreateRouteLazyRoute = CreateRouteLazyImport.update({
  path: '/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/create/route.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MyfollowingsIndexLazyRoute = MyfollowingsIndexLazyImport.update({
  path: '/myfollowings/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/myfollowings/index.lazy').then((d) => d.Route),
)

const MyfollowersIndexLazyRoute = MyfollowersIndexLazyImport.update({
  path: '/myfollowers/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/myfollowers/index.lazy').then((d) => d.Route),
)

const RecipeIdIndexRoute = RecipeIdIndexImport.update({
  path: '/$recipeId/',
  getParentRoute: () => rootRoute,
} as any)

const UserIdRecipesLazyRoute = UserIdRecipesLazyImport.update({
  path: '/$userId/recipes',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/$userId/recipes.lazy').then((d) => d.Route),
)

const RecipeIdEditLazyRoute = RecipeIdEditLazyImport.update({
  path: '/$recipeId/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/$recipeId/edit.lazy').then((d) => d.Route),
)

const FollowIdFollowingsLazyRoute = FollowIdFollowingsLazyImport.update({
  path: '/$followId/followings',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/$followId/followings.lazy').then((d) => d.Route),
)

const FollowIdFollowersLazyRoute = FollowIdFollowersLazyImport.update({
  path: '/$followId/followers',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/$followId/followers.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      preLoaderRoute: typeof CreateRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/favorites': {
      preLoaderRoute: typeof FavoritesRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      preLoaderRoute: typeof ProfileRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      preLoaderRoute: typeof SigninRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/$followId/followers': {
      preLoaderRoute: typeof FollowIdFollowersLazyImport
      parentRoute: typeof rootRoute
    }
    '/$followId/followings': {
      preLoaderRoute: typeof FollowIdFollowingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/$recipeId/edit': {
      preLoaderRoute: typeof RecipeIdEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/$userId/recipes': {
      preLoaderRoute: typeof UserIdRecipesLazyImport
      parentRoute: typeof rootRoute
    }
    '/$recipeId/': {
      preLoaderRoute: typeof RecipeIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/myfollowers/': {
      preLoaderRoute: typeof MyfollowersIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/myfollowings/': {
      preLoaderRoute: typeof MyfollowingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  CreateRouteLazyRoute,
  FavoritesRouteLazyRoute,
  ProfileRouteLazyRoute,
  SigninRouteLazyRoute,
  SignupRouteLazyRoute,
  FollowIdFollowersLazyRoute,
  FollowIdFollowingsLazyRoute,
  RecipeIdEditLazyRoute,
  UserIdRecipesLazyRoute,
  RecipeIdIndexRoute,
  MyfollowersIndexLazyRoute,
  MyfollowingsIndexLazyRoute,
])

/* prettier-ignore-end */
